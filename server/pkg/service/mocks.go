// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"example.com/gameHoldTheProcessServer"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUser creates a new instance of MockUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUser {
	mock := &MockUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUser is an autogenerated mock type for the User type
type MockUser struct {
	mock.Mock
}

type MockUser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUser) EXPECT() *MockUser_Expecter {
	return &MockUser_Expecter{mock: &_m.Mock}
}

// CreateGroup provides a mock function for the type MockUser
func (_mock *MockUser) CreateGroup(input gameServer.CreateGroupInput) (int, error) {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gameServer.CreateGroupInput) (int, error)); ok {
		return returnFunc(input)
	}
	if returnFunc, ok := ret.Get(0).(func(gameServer.CreateGroupInput) int); ok {
		r0 = returnFunc(input)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(gameServer.CreateGroupInput) error); ok {
		r1 = returnFunc(input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUser_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockUser_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - input gameServer.CreateGroupInput
func (_e *MockUser_Expecter) CreateGroup(input interface{}) *MockUser_CreateGroup_Call {
	return &MockUser_CreateGroup_Call{Call: _e.mock.On("CreateGroup", input)}
}

func (_c *MockUser_CreateGroup_Call) Run(run func(input gameServer.CreateGroupInput)) *MockUser_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 gameServer.CreateGroupInput
		if args[0] != nil {
			arg0 = args[0].(gameServer.CreateGroupInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUser_CreateGroup_Call) Return(n int, err error) *MockUser_CreateGroup_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUser_CreateGroup_Call) RunAndReturn(run func(input gameServer.CreateGroupInput) (int, error)) *MockUser_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockUser
func (_mock *MockUser) CreateUser(user gameServer.RegisterUserInput) (string, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gameServer.RegisterUserInput) (string, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(gameServer.RegisterUserInput) string); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(gameServer.RegisterUserInput) error); ok {
		r1 = returnFunc(user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUser_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUser_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user gameServer.RegisterUserInput
func (_e *MockUser_Expecter) CreateUser(user interface{}) *MockUser_CreateUser_Call {
	return &MockUser_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *MockUser_CreateUser_Call) Run(run func(user gameServer.RegisterUserInput)) *MockUser_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 gameServer.RegisterUserInput
		if args[0] != nil {
			arg0 = args[0].(gameServer.RegisterUserInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUser_CreateUser_Call) Return(s string, err error) *MockUser_CreateUser_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUser_CreateUser_Call) RunAndReturn(run func(user gameServer.RegisterUserInput) (string, error)) *MockUser_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockUser
func (_mock *MockUser) DeleteUser(id int) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUser_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUser_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - id int
func (_e *MockUser_Expecter) DeleteUser(id interface{}) *MockUser_DeleteUser_Call {
	return &MockUser_DeleteUser_Call{Call: _e.mock.On("DeleteUser", id)}
}

func (_c *MockUser_DeleteUser_Call) Run(run func(id int)) *MockUser_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUser_DeleteUser_Call) Return(err error) *MockUser_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUser_DeleteUser_Call) RunAndReturn(run func(id int) error) *MockUser_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateToken provides a mock function for the type MockUser
func (_mock *MockUser) GenerateToken(login string, password string) (string, error) {
	ret := _mock.Called(login, password)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(login, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(login, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(login, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUser_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockUser_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - login string
//   - password string
func (_e *MockUser_Expecter) GenerateToken(login interface{}, password interface{}) *MockUser_GenerateToken_Call {
	return &MockUser_GenerateToken_Call{Call: _e.mock.On("GenerateToken", login, password)}
}

func (_c *MockUser_GenerateToken_Call) Run(run func(login string, password string)) *MockUser_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUser_GenerateToken_Call) Return(s string, err error) *MockUser_GenerateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUser_GenerateToken_Call) RunAndReturn(run func(login string, password string) (string, error)) *MockUser_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllGroups provides a mock function for the type MockUser
func (_mock *MockUser) GetAllGroups() ([]gameServer.Group, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllGroups")
	}

	var r0 []gameServer.Group
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]gameServer.Group, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []gameServer.Group); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gameServer.Group)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUser_GetAllGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllGroups'
type MockUser_GetAllGroups_Call struct {
	*mock.Call
}

// GetAllGroups is a helper method to define mock.On call
func (_e *MockUser_Expecter) GetAllGroups() *MockUser_GetAllGroups_Call {
	return &MockUser_GetAllGroups_Call{Call: _e.mock.On("GetAllGroups")}
}

func (_c *MockUser_GetAllGroups_Call) Run(run func()) *MockUser_GetAllGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUser_GetAllGroups_Call) Return(groups []gameServer.Group, err error) *MockUser_GetAllGroups_Call {
	_c.Call.Return(groups, err)
	return _c
}

func (_c *MockUser_GetAllGroups_Call) RunAndReturn(run func() ([]gameServer.Group, error)) *MockUser_GetAllGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function for the type MockUser
func (_mock *MockUser) GetAllUsers(input gameServer.GetAllUsersInput) ([]gameServer.User, error) {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []gameServer.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gameServer.GetAllUsersInput) ([]gameServer.User, error)); ok {
		return returnFunc(input)
	}
	if returnFunc, ok := ret.Get(0).(func(gameServer.GetAllUsersInput) []gameServer.User); ok {
		r0 = returnFunc(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gameServer.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gameServer.GetAllUsersInput) error); ok {
		r1 = returnFunc(input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUser_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockUser_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - input gameServer.GetAllUsersInput
func (_e *MockUser_Expecter) GetAllUsers(input interface{}) *MockUser_GetAllUsers_Call {
	return &MockUser_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", input)}
}

func (_c *MockUser_GetAllUsers_Call) Run(run func(input gameServer.GetAllUsersInput)) *MockUser_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 gameServer.GetAllUsersInput
		if args[0] != nil {
			arg0 = args[0].(gameServer.GetAllUsersInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUser_GetAllUsers_Call) Return(users []gameServer.User, err error) *MockUser_GetAllUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUser_GetAllUsers_Call) RunAndReturn(run func(input gameServer.GetAllUsersInput) ([]gameServer.User, error)) *MockUser_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneUser provides a mock function for the type MockUser
func (_mock *MockUser) GetOneUser(id int) (gameServer.User, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOneUser")
	}

	var r0 gameServer.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (gameServer.User, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) gameServer.User); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(gameServer.User)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUser_GetOneUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneUser'
type MockUser_GetOneUser_Call struct {
	*mock.Call
}

// GetOneUser is a helper method to define mock.On call
//   - id int
func (_e *MockUser_Expecter) GetOneUser(id interface{}) *MockUser_GetOneUser_Call {
	return &MockUser_GetOneUser_Call{Call: _e.mock.On("GetOneUser", id)}
}

func (_c *MockUser_GetOneUser_Call) Run(run func(id int)) *MockUser_GetOneUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUser_GetOneUser_Call) Return(user gameServer.User, err error) *MockUser_GetOneUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUser_GetOneUser_Call) RunAndReturn(run func(id int) (gameServer.User, error)) *MockUser_GetOneUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetParSet provides a mock function for the type MockUser
func (_mock *MockUser) GetParSet(id int) (gameServer.ParameterSet, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetParSet")
	}

	var r0 gameServer.ParameterSet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (gameServer.ParameterSet, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) gameServer.ParameterSet); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(gameServer.ParameterSet)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUser_GetParSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParSet'
type MockUser_GetParSet_Call struct {
	*mock.Call
}

// GetParSet is a helper method to define mock.On call
//   - id int
func (_e *MockUser_Expecter) GetParSet(id interface{}) *MockUser_GetParSet_Call {
	return &MockUser_GetParSet_Call{Call: _e.mock.On("GetParSet", id)}
}

func (_c *MockUser_GetParSet_Call) Run(run func(id int)) *MockUser_GetParSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUser_GetParSet_Call) Return(parameterSet gameServer.ParameterSet, err error) *MockUser_GetParSet_Call {
	_c.Call.Return(parameterSet, err)
	return _c
}

func (_c *MockUser_GetParSet_Call) RunAndReturn(run func(id int) (gameServer.ParameterSet, error)) *MockUser_GetParSet_Call {
	_c.Call.Return(run)
	return _c
}

// GetScore provides a mock function for the type MockUser
func (_mock *MockUser) GetScore(userId int, parSetId int) (int, error) {
	ret := _mock.Called(userId, parSetId)

	if len(ret) == 0 {
		panic("no return value specified for GetScore")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int) (int, error)); ok {
		return returnFunc(userId, parSetId)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = returnFunc(userId, parSetId)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = returnFunc(userId, parSetId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUser_GetScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScore'
type MockUser_GetScore_Call struct {
	*mock.Call
}

// GetScore is a helper method to define mock.On call
//   - userId int
//   - parSetId int
func (_e *MockUser_Expecter) GetScore(userId interface{}, parSetId interface{}) *MockUser_GetScore_Call {
	return &MockUser_GetScore_Call{Call: _e.mock.On("GetScore", userId, parSetId)}
}

func (_c *MockUser_GetScore_Call) Run(run func(userId int, parSetId int)) *MockUser_GetScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUser_GetScore_Call) Return(n int, err error) *MockUser_GetScore_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUser_GetScore_Call) RunAndReturn(run func(userId int, parSetId int) (int, error)) *MockUser_GetScore_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersPageCount provides a mock function for the type MockUser
func (_mock *MockUser) GetUsersPageCount(input gameServer.GetUsersPageCountInput) (int, error) {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersPageCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gameServer.GetUsersPageCountInput) (int, error)); ok {
		return returnFunc(input)
	}
	if returnFunc, ok := ret.Get(0).(func(gameServer.GetUsersPageCountInput) int); ok {
		r0 = returnFunc(input)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(gameServer.GetUsersPageCountInput) error); ok {
		r1 = returnFunc(input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUser_GetUsersPageCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersPageCount'
type MockUser_GetUsersPageCount_Call struct {
	*mock.Call
}

// GetUsersPageCount is a helper method to define mock.On call
//   - input gameServer.GetUsersPageCountInput
func (_e *MockUser_Expecter) GetUsersPageCount(input interface{}) *MockUser_GetUsersPageCount_Call {
	return &MockUser_GetUsersPageCount_Call{Call: _e.mock.On("GetUsersPageCount", input)}
}

func (_c *MockUser_GetUsersPageCount_Call) Run(run func(input gameServer.GetUsersPageCountInput)) *MockUser_GetUsersPageCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 gameServer.GetUsersPageCountInput
		if args[0] != nil {
			arg0 = args[0].(gameServer.GetUsersPageCountInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUser_GetUsersPageCount_Call) Return(n int, err error) *MockUser_GetUsersPageCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUser_GetUsersPageCount_Call) RunAndReturn(run func(input gameServer.GetUsersPageCountInput) (int, error)) *MockUser_GetUsersPageCount_Call {
	_c.Call.Return(run)
	return _c
}

// ParseToken provides a mock function for the type MockUser
func (_mock *MockUser) ParseToken(token string) (*TokenClaims, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ParseToken")
	}

	var r0 *TokenClaims
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*TokenClaims, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *TokenClaims); ok {
		r0 = returnFunc(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TokenClaims)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUser_ParseToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseToken'
type MockUser_ParseToken_Call struct {
	*mock.Call
}

// ParseToken is a helper method to define mock.On call
//   - token string
func (_e *MockUser_Expecter) ParseToken(token interface{}) *MockUser_ParseToken_Call {
	return &MockUser_ParseToken_Call{Call: _e.mock.On("ParseToken", token)}
}

func (_c *MockUser_ParseToken_Call) Run(run func(token string)) *MockUser_ParseToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUser_ParseToken_Call) Return(tokenClaims *TokenClaims, err error) *MockUser_ParseToken_Call {
	_c.Call.Return(tokenClaims, err)
	return _c
}

func (_c *MockUser_ParseToken_Call) RunAndReturn(run func(token string) (*TokenClaims, error)) *MockUser_ParseToken_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function for the type MockUser
func (_mock *MockUser) RefreshToken(accessToken string) (string, error) {
	ret := _mock.Called(accessToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(accessToken)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(accessToken)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(accessToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUser_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockUser_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - accessToken string
func (_e *MockUser_Expecter) RefreshToken(accessToken interface{}) *MockUser_RefreshToken_Call {
	return &MockUser_RefreshToken_Call{Call: _e.mock.On("RefreshToken", accessToken)}
}

func (_c *MockUser_RefreshToken_Call) Run(run func(accessToken string)) *MockUser_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUser_RefreshToken_Call) Return(s string, err error) *MockUser_RefreshToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUser_RefreshToken_Call) RunAndReturn(run func(accessToken string) (string, error)) *MockUser_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateScore provides a mock function for the type MockUser
func (_mock *MockUser) UpdateScore(input gameServer.UpdateScoreInput) error {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateScore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gameServer.UpdateScoreInput) error); ok {
		r0 = returnFunc(input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUser_UpdateScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateScore'
type MockUser_UpdateScore_Call struct {
	*mock.Call
}

// UpdateScore is a helper method to define mock.On call
//   - input gameServer.UpdateScoreInput
func (_e *MockUser_Expecter) UpdateScore(input interface{}) *MockUser_UpdateScore_Call {
	return &MockUser_UpdateScore_Call{Call: _e.mock.On("UpdateScore", input)}
}

func (_c *MockUser_UpdateScore_Call) Run(run func(input gameServer.UpdateScoreInput)) *MockUser_UpdateScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 gameServer.UpdateScoreInput
		if args[0] != nil {
			arg0 = args[0].(gameServer.UpdateScoreInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUser_UpdateScore_Call) Return(err error) *MockUser_UpdateScore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUser_UpdateScore_Call) RunAndReturn(run func(input gameServer.UpdateScoreInput) error) *MockUser_UpdateScore_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockUser
func (_mock *MockUser) UpdateUser(id int, input gameServer.UpdateUserInput) error {
	ret := _mock.Called(id, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, gameServer.UpdateUserInput) error); ok {
		r0 = returnFunc(id, input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUser_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUser_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - id int
//   - input gameServer.UpdateUserInput
func (_e *MockUser_Expecter) UpdateUser(id interface{}, input interface{}) *MockUser_UpdateUser_Call {
	return &MockUser_UpdateUser_Call{Call: _e.mock.On("UpdateUser", id, input)}
}

func (_c *MockUser_UpdateUser_Call) Run(run func(id int, input gameServer.UpdateUserInput)) *MockUser_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 gameServer.UpdateUserInput
		if args[1] != nil {
			arg1 = args[1].(gameServer.UpdateUserInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUser_UpdateUser_Call) Return(err error) *MockUser_UpdateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUser_UpdateUser_Call) RunAndReturn(run func(id int, input gameServer.UpdateUserInput) error) *MockUser_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChart creates a new instance of MockChart. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChart(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChart {
	mock := &MockChart{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockChart is an autogenerated mock type for the Chart type
type MockChart struct {
	mock.Mock
}

type MockChart_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChart) EXPECT() *MockChart_Expecter {
	return &MockChart_Expecter{mock: &_m.Mock}
}

// CreateChart provides a mock function for the type MockChart
func (_mock *MockChart) CreateChart(chart gameServer.CreateChartInput) (int, error) {
	ret := _mock.Called(chart)

	if len(ret) == 0 {
		panic("no return value specified for CreateChart")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gameServer.CreateChartInput) (int, error)); ok {
		return returnFunc(chart)
	}
	if returnFunc, ok := ret.Get(0).(func(gameServer.CreateChartInput) int); ok {
		r0 = returnFunc(chart)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(gameServer.CreateChartInput) error); ok {
		r1 = returnFunc(chart)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChart_CreateChart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChart'
type MockChart_CreateChart_Call struct {
	*mock.Call
}

// CreateChart is a helper method to define mock.On call
//   - chart gameServer.CreateChartInput
func (_e *MockChart_Expecter) CreateChart(chart interface{}) *MockChart_CreateChart_Call {
	return &MockChart_CreateChart_Call{Call: _e.mock.On("CreateChart", chart)}
}

func (_c *MockChart_CreateChart_Call) Run(run func(chart gameServer.CreateChartInput)) *MockChart_CreateChart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 gameServer.CreateChartInput
		if args[0] != nil {
			arg0 = args[0].(gameServer.CreateChartInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockChart_CreateChart_Call) Return(n int, err error) *MockChart_CreateChart_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockChart_CreateChart_Call) RunAndReturn(run func(chart gameServer.CreateChartInput) (int, error)) *MockChart_CreateChart_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChart provides a mock function for the type MockChart
func (_mock *MockChart) DeleteChart(id int) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChart_DeleteChart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChart'
type MockChart_DeleteChart_Call struct {
	*mock.Call
}

// DeleteChart is a helper method to define mock.On call
//   - id int
func (_e *MockChart_Expecter) DeleteChart(id interface{}) *MockChart_DeleteChart_Call {
	return &MockChart_DeleteChart_Call{Call: _e.mock.On("DeleteChart", id)}
}

func (_c *MockChart_DeleteChart_Call) Run(run func(id int)) *MockChart_DeleteChart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockChart_DeleteChart_Call) Return(err error) *MockChart_DeleteChart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChart_DeleteChart_Call) RunAndReturn(run func(id int) error) *MockChart_DeleteChart_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCharts provides a mock function for the type MockChart
func (_mock *MockChart) GetAllCharts(input gameServer.GetAllChartsInput) ([]gameServer.Chart, error) {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCharts")
	}

	var r0 []gameServer.Chart
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gameServer.GetAllChartsInput) ([]gameServer.Chart, error)); ok {
		return returnFunc(input)
	}
	if returnFunc, ok := ret.Get(0).(func(gameServer.GetAllChartsInput) []gameServer.Chart); ok {
		r0 = returnFunc(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gameServer.Chart)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gameServer.GetAllChartsInput) error); ok {
		r1 = returnFunc(input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChart_GetAllCharts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCharts'
type MockChart_GetAllCharts_Call struct {
	*mock.Call
}

// GetAllCharts is a helper method to define mock.On call
//   - input gameServer.GetAllChartsInput
func (_e *MockChart_Expecter) GetAllCharts(input interface{}) *MockChart_GetAllCharts_Call {
	return &MockChart_GetAllCharts_Call{Call: _e.mock.On("GetAllCharts", input)}
}

func (_c *MockChart_GetAllCharts_Call) Run(run func(input gameServer.GetAllChartsInput)) *MockChart_GetAllCharts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 gameServer.GetAllChartsInput
		if args[0] != nil {
			arg0 = args[0].(gameServer.GetAllChartsInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockChart_GetAllCharts_Call) Return(charts []gameServer.Chart, err error) *MockChart_GetAllCharts_Call {
	_c.Call.Return(charts, err)
	return _c
}

func (_c *MockChart_GetAllCharts_Call) RunAndReturn(run func(input gameServer.GetAllChartsInput) ([]gameServer.Chart, error)) *MockChart_GetAllCharts_Call {
	_c.Call.Return(run)
	return _c
}

// GetChartsCount provides a mock function for the type MockChart
func (_mock *MockChart) GetChartsCount(input gameServer.GetChartsCountInput) (int, error) {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for GetChartsCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gameServer.GetChartsCountInput) (int, error)); ok {
		return returnFunc(input)
	}
	if returnFunc, ok := ret.Get(0).(func(gameServer.GetChartsCountInput) int); ok {
		r0 = returnFunc(input)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(gameServer.GetChartsCountInput) error); ok {
		r1 = returnFunc(input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChart_GetChartsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChartsCount'
type MockChart_GetChartsCount_Call struct {
	*mock.Call
}

// GetChartsCount is a helper method to define mock.On call
//   - input gameServer.GetChartsCountInput
func (_e *MockChart_Expecter) GetChartsCount(input interface{}) *MockChart_GetChartsCount_Call {
	return &MockChart_GetChartsCount_Call{Call: _e.mock.On("GetChartsCount", input)}
}

func (_c *MockChart_GetChartsCount_Call) Run(run func(input gameServer.GetChartsCountInput)) *MockChart_GetChartsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 gameServer.GetChartsCountInput
		if args[0] != nil {
			arg0 = args[0].(gameServer.GetChartsCountInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockChart_GetChartsCount_Call) Return(n int, err error) *MockChart_GetChartsCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockChart_GetChartsCount_Call) RunAndReturn(run func(input gameServer.GetChartsCountInput) (int, error)) *MockChart_GetChartsCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetChartsPageCount provides a mock function for the type MockChart
func (_mock *MockChart) GetChartsPageCount(input gameServer.GetChartsPageCountInput) (int, error) {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for GetChartsPageCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gameServer.GetChartsPageCountInput) (int, error)); ok {
		return returnFunc(input)
	}
	if returnFunc, ok := ret.Get(0).(func(gameServer.GetChartsPageCountInput) int); ok {
		r0 = returnFunc(input)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(gameServer.GetChartsPageCountInput) error); ok {
		r1 = returnFunc(input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChart_GetChartsPageCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChartsPageCount'
type MockChart_GetChartsPageCount_Call struct {
	*mock.Call
}

// GetChartsPageCount is a helper method to define mock.On call
//   - input gameServer.GetChartsPageCountInput
func (_e *MockChart_Expecter) GetChartsPageCount(input interface{}) *MockChart_GetChartsPageCount_Call {
	return &MockChart_GetChartsPageCount_Call{Call: _e.mock.On("GetChartsPageCount", input)}
}

func (_c *MockChart_GetChartsPageCount_Call) Run(run func(input gameServer.GetChartsPageCountInput)) *MockChart_GetChartsPageCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 gameServer.GetChartsPageCountInput
		if args[0] != nil {
			arg0 = args[0].(gameServer.GetChartsPageCountInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockChart_GetChartsPageCount_Call) Return(n int, err error) *MockChart_GetChartsPageCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockChart_GetChartsPageCount_Call) RunAndReturn(run func(input gameServer.GetChartsPageCountInput) (int, error)) *MockChart_GetChartsPageCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneChart provides a mock function for the type MockChart
func (_mock *MockChart) GetOneChart(id int) (gameServer.Chart, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOneChart")
	}

	var r0 gameServer.Chart
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (gameServer.Chart, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) gameServer.Chart); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(gameServer.Chart)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChart_GetOneChart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneChart'
type MockChart_GetOneChart_Call struct {
	*mock.Call
}

// GetOneChart is a helper method to define mock.On call
//   - id int
func (_e *MockChart_Expecter) GetOneChart(id interface{}) *MockChart_GetOneChart_Call {
	return &MockChart_GetOneChart_Call{Call: _e.mock.On("GetOneChart", id)}
}

func (_c *MockChart_GetOneChart_Call) Run(run func(id int)) *MockChart_GetOneChart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockChart_GetOneChart_Call) Return(chart gameServer.Chart, err error) *MockChart_GetOneChart_Call {
	_c.Call.Return(chart, err)
	return _c
}

func (_c *MockChart_GetOneChart_Call) RunAndReturn(run func(id int) (gameServer.Chart, error)) *MockChart_GetOneChart_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPoint creates a new instance of MockPoint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPoint(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPoint {
	mock := &MockPoint{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPoint is an autogenerated mock type for the Point type
type MockPoint struct {
	mock.Mock
}

type MockPoint_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPoint) EXPECT() *MockPoint_Expecter {
	return &MockPoint_Expecter{mock: &_m.Mock}
}

// CreatePoint provides a mock function for the type MockPoint
func (_mock *MockPoint) CreatePoint(input gameServer.Point) (int, error) {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreatePoint")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gameServer.Point) (int, error)); ok {
		return returnFunc(input)
	}
	if returnFunc, ok := ret.Get(0).(func(gameServer.Point) int); ok {
		r0 = returnFunc(input)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(gameServer.Point) error); ok {
		r1 = returnFunc(input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPoint_CreatePoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePoint'
type MockPoint_CreatePoint_Call struct {
	*mock.Call
}

// CreatePoint is a helper method to define mock.On call
//   - input gameServer.Point
func (_e *MockPoint_Expecter) CreatePoint(input interface{}) *MockPoint_CreatePoint_Call {
	return &MockPoint_CreatePoint_Call{Call: _e.mock.On("CreatePoint", input)}
}

func (_c *MockPoint_CreatePoint_Call) Run(run func(input gameServer.Point)) *MockPoint_CreatePoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 gameServer.Point
		if args[0] != nil {
			arg0 = args[0].(gameServer.Point)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPoint_CreatePoint_Call) Return(n int, err error) *MockPoint_CreatePoint_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockPoint_CreatePoint_Call) RunAndReturn(run func(input gameServer.Point) (int, error)) *MockPoint_CreatePoint_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePoint provides a mock function for the type MockPoint
func (_mock *MockPoint) DeletePoint(id int) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePoint")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPoint_DeletePoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePoint'
type MockPoint_DeletePoint_Call struct {
	*mock.Call
}

// DeletePoint is a helper method to define mock.On call
//   - id int
func (_e *MockPoint_Expecter) DeletePoint(id interface{}) *MockPoint_DeletePoint_Call {
	return &MockPoint_DeletePoint_Call{Call: _e.mock.On("DeletePoint", id)}
}

func (_c *MockPoint_DeletePoint_Call) Run(run func(id int)) *MockPoint_DeletePoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPoint_DeletePoint_Call) Return(err error) *MockPoint_DeletePoint_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPoint_DeletePoint_Call) RunAndReturn(run func(id int) error) *MockPoint_DeletePoint_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPointsById provides a mock function for the type MockPoint
func (_mock *MockPoint) GetAllPointsById(id int) ([]gameServer.Point, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPointsById")
	}

	var r0 []gameServer.Point
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) ([]gameServer.Point, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) []gameServer.Point); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gameServer.Point)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPoint_GetAllPointsById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPointsById'
type MockPoint_GetAllPointsById_Call struct {
	*mock.Call
}

// GetAllPointsById is a helper method to define mock.On call
//   - id int
func (_e *MockPoint_Expecter) GetAllPointsById(id interface{}) *MockPoint_GetAllPointsById_Call {
	return &MockPoint_GetAllPointsById_Call{Call: _e.mock.On("GetAllPointsById", id)}
}

func (_c *MockPoint_GetAllPointsById_Call) Run(run func(id int)) *MockPoint_GetAllPointsById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPoint_GetAllPointsById_Call) Return(points []gameServer.Point, err error) *MockPoint_GetAllPointsById_Call {
	_c.Call.Return(points, err)
	return _c
}

func (_c *MockPoint_GetAllPointsById_Call) RunAndReturn(run func(id int) ([]gameServer.Point, error)) *MockPoint_GetAllPointsById_Call {
	_c.Call.Return(run)
	return _c
}

// GetCsvOfPoints provides a mock function for the type MockPoint
func (_mock *MockPoint) GetCsvOfPoints() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCsvOfPoints")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPoint_GetCsvOfPoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCsvOfPoints'
type MockPoint_GetCsvOfPoints_Call struct {
	*mock.Call
}

// GetCsvOfPoints is a helper method to define mock.On call
func (_e *MockPoint_Expecter) GetCsvOfPoints() *MockPoint_GetCsvOfPoints_Call {
	return &MockPoint_GetCsvOfPoints_Call{Call: _e.mock.On("GetCsvOfPoints")}
}

func (_c *MockPoint_GetCsvOfPoints_Call) Run(run func()) *MockPoint_GetCsvOfPoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPoint_GetCsvOfPoints_Call) Return(s string, err error) *MockPoint_GetCsvOfPoints_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPoint_GetCsvOfPoints_Call) RunAndReturn(run func() (string, error)) *MockPoint_GetCsvOfPoints_Call {
	_c.Call.Return(run)
	return _c
}

// GetOnePoint provides a mock function for the type MockPoint
func (_mock *MockPoint) GetOnePoint(id int) (gameServer.Point, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOnePoint")
	}

	var r0 gameServer.Point
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (gameServer.Point, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) gameServer.Point); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(gameServer.Point)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPoint_GetOnePoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOnePoint'
type MockPoint_GetOnePoint_Call struct {
	*mock.Call
}

// GetOnePoint is a helper method to define mock.On call
//   - id int
func (_e *MockPoint_Expecter) GetOnePoint(id interface{}) *MockPoint_GetOnePoint_Call {
	return &MockPoint_GetOnePoint_Call{Call: _e.mock.On("GetOnePoint", id)}
}

func (_c *MockPoint_GetOnePoint_Call) Run(run func(id int)) *MockPoint_GetOnePoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPoint_GetOnePoint_Call) Return(point gameServer.Point, err error) *MockPoint_GetOnePoint_Call {
	_c.Call.Return(point, err)
	return _c
}

func (_c *MockPoint_GetOnePoint_Call) RunAndReturn(run func(id int) (gameServer.Point, error)) *MockPoint_GetOnePoint_Call {
	_c.Call.Return(run)
	return _c
}
